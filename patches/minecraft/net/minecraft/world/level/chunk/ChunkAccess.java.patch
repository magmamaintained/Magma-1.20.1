--- a/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -71,7 +_,7 @@
    protected final UpgradeData f_187606_;
    @Nullable
    protected BlendingData f_187607_;
-   protected final Map<Heightmap.Types, Heightmap> f_187608_ = Maps.newEnumMap(Heightmap.Types.class);
+   public final Map<Heightmap.Types, Heightmap> f_187608_ = Maps.newEnumMap(Heightmap.Types.class);
    protected ChunkSkyLightSources f_283754_;
    private final Map<Structure, StructureStart> f_187617_ = Maps.newHashMap();
    private final Map<Structure, LongSet> f_187618_ = Maps.newHashMap();
@@ -80,6 +_,11 @@
    protected final LevelHeightAccessor f_187611_;
    protected final LevelChunkSection[] f_187612_;
 
+   // CraftBukkit start - SPIGOT-6814: move to IChunkAccess to account for 1.17 to 1.18 chunk upgrading.
+   private static final org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry();
+   public org.bukkit.craftbukkit.persistence.DirtyCraftPersistentDataContainer persistentDataContainer = new org.bukkit.craftbukkit.persistence.DirtyCraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+   // CraftBukkit end
+
    public ChunkAccess(ChunkPos p_187621_, UpgradeData p_187622_, LevelHeightAccessor p_187623_, Registry<Biome> p_187624_, long p_187625_, @Nullable LevelChunkSection[] p_187626_, @Nullable BlendingData p_187627_) {
       this.f_187604_ = p_187621_;
       this.f_187606_ = p_187622_;
@@ -98,7 +_,11 @@
       }
 
       m_280116_(p_187624_, this.f_187612_);
+      // CraftBukkit start
+      this.biomeRegistry = p_187624_;
    }
+   public final Registry<Biome> biomeRegistry;
+   // CraftBukkit end
 
    private static void m_280116_(Registry<Biome> p_281389_, LevelChunkSection[] p_282796_) {
       for(int i = 0; i < p_282796_.length; ++i) {
@@ -253,10 +_,11 @@
 
    public void m_8092_(boolean p_62094_) {
       this.f_187603_ = p_62094_;
+      if (!p_62094_) this.persistentDataContainer.dirty(false); // CraftBukkit - SPIGOT-6814: chunk was saved, pdc is no longer dirty
    }
 
    public boolean m_6344_() {
-      return this.f_187603_;
+      return this.f_187603_ || this.persistentDataContainer.dirty(); // CraftBukkit - SPIGOT-6814: chunk is unsaved if pdc was mutated
    }
 
    public abstract ChunkStatus m_6415_();
@@ -299,25 +_,30 @@
    public abstract CompoundTag m_8051_(BlockPos p_62104_);
 
    public final void m_284254_(BiConsumer<BlockPos, BlockState> p_285269_) {
-      this.m_284478_((p_284897_) -> {
-         return p_284897_.m_60791_() != 0;
+      this.findBlocks((p_284897_, pos) -> {
+         return p_284897_.getLightEmission(this, pos) != 0;
       }, p_285269_);
    }
 
    public void m_284478_(Predicate<BlockState> p_285343_, BiConsumer<BlockPos, BlockState> p_285030_) {
+      findBlocks((state, pos) -> p_285343_.test(state), p_285030_);
+   }
+
+   public void findBlocks(java.util.function.BiPredicate<BlockState, BlockPos> p_285343_, BiConsumer<BlockPos, BlockState> p_285030_) {
       BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
       for(int i = this.m_151560_(); i < this.m_151561_(); ++i) {
          LevelChunkSection levelchunksection = this.m_183278_(this.m_151566_(i));
-         if (levelchunksection.m_63002_(p_285343_)) {
+         if (levelchunksection.m_63002_((state) -> p_285343_.test(state, BlockPos.f_121853_))) {
             BlockPos blockpos = SectionPos.m_123196_(this.f_187604_, i).m_123249_();
 
             for(int j = 0; j < 16; ++j) {
                for(int k = 0; k < 16; ++k) {
                   for(int l = 0; l < 16; ++l) {
                      BlockState blockstate = levelchunksection.m_62982_(l, j, k);
-                     if (p_285343_.test(blockstate)) {
-                        p_285030_.accept(blockpos$mutableblockpos.m_122154_(blockpos, l, j, k), blockstate);
+                     blockpos$mutableblockpos.m_122154_(blockpos, l, j, k);
+                     if (p_285343_.test(blockstate, blockpos$mutableblockpos.m_7949_())) {
+                        p_285030_.accept(blockpos$mutableblockpos, blockstate);
                      }
                   }
                }
@@ -436,6 +_,25 @@
 
    }
 
+   // CraftBukkit start
+   public void setBiome(int i, int j, int k, Holder<Biome> biome) {
+      try {
+         int l = QuartPos.m_175400_(this.m_141937_());
+         int i1 = l + QuartPos.m_175400_(this.m_141928_()) - 1;
+         int j1 = Mth.m_14045_(j, l, i1);
+         int k1 = this.m_151564_(QuartPos.m_175402_(j1));
+         this.f_187612_[k1].setBiome(i & 3, j1 & 3, k & 3, biome);
+      } catch (Throwable throwable) {
+         CrashReport crashreport = CrashReport.m_127521_(throwable, "Setting biome");
+         CrashReportCategory crashreportsystemdetails = crashreport.m_127514_("Biome being set");
+         crashreportsystemdetails.m_128165_("Location", () -> {
+            return CrashReportCategory.m_178942_(this, i, j, k);
+         });
+         throw new ReportedException(crashreport);
+      }
+   }
+   // CraftBukkit end
+
    public boolean m_187678_() {
       return !this.m_62769_().isEmpty();
    }
@@ -463,4 +_,7 @@
 
    public static record TicksToSave(SerializableTickContainer<Block> f_187680_, SerializableTickContainer<Fluid> f_187681_) {
    }
+
+   @Nullable
+   public net.minecraft.world.level.LevelAccessor getWorldForge() { return null; }
 }
