--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -47,7 +_,7 @@
 import net.minecraft.world.ticks.TickContainerAccess;
 import org.slf4j.Logger;
 
-public class LevelChunk extends ChunkAccess {
+public class LevelChunk extends ChunkAccess implements net.minecraftforge.common.capabilities.ICapabilityProviderImpl<LevelChunk> {
    static final Logger f_62771_ = LogUtils.getLogger();
    private static final TickingBlockEntity f_156361_ = new TickingBlockEntity() {
       public void m_142224_() {
@@ -94,7 +_,13 @@
       this.f_62791_ = p_196861_;
       this.f_62784_ = p_196857_;
       this.f_187943_ = p_196858_;
+      this.capProvider.initInternal();
    }
+
+   // CraftBukkit start
+   public boolean mustNotSave;
+   public boolean needsDecoration;
+   // CraftBukkit end
 
    public LevelChunk(ServerLevel p_196850_, ProtoChunk p_196851_, @Nullable LevelChunk.PostLoadProcessor p_196852_) {
       this(p_196850_, p_196851_.m_7697_(), p_196851_.m_7387_(), p_196851_.m_188181_(), p_196851_.m_188182_(), p_196851_.m_6319_(), p_196851_.m_7103_(), p_196852_, p_196851_.m_183407_());
@@ -121,6 +_,10 @@
       this.f_283754_ = p_196851_.f_283754_;
       this.m_8094_(p_196851_.m_6332_());
       this.f_187603_ = true;
+      this.needsDecoration = true; // CraftBukkit
+      // CraftBukkit start
+      this.persistentDataContainer = p_196851_.persistentDataContainer; // SPIGOT-6814: copy PDC to account for 1.17 to 1.18 chunk upgrading.
+      // CraftBukkit end
    }
 
    public TickContainerAccess<Block> m_183531_() {
@@ -208,6 +_,13 @@
       }
    }
 
+   // Magma start - Move doPlace to different constructor
+   public boolean doPlace = true;
+   public void prepareSetBlockState(boolean doPlace) {
+      this.doPlace = doPlace;
+   }
+   // Magma end
+
    @Nullable
    public BlockState m_6978_(BlockPos p_62865_, BlockState p_62866_, boolean p_62867_) {
       int i = p_62865_.m_123342_();
@@ -245,14 +_,15 @@
             boolean flag2 = blockstate.m_155947_();
             if (!this.f_62776_.f_46443_) {
                blockstate.m_60753_(this.f_62776_, p_62865_, p_62866_, p_62867_);
-            } else if (!blockstate.m_60713_(block) && flag2) {
+         } else if ((!blockstate.m_60713_(block) || !p_62866_.m_155947_()) && flag2) {
                this.m_8114_(p_62865_);
             }
 
             if (!levelchunksection.m_62982_(j, k, l).m_60713_(block)) {
                return null;
             } else {
-               if (!this.f_62776_.f_46443_) {
+               // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
+               if (!this.f_62776_.f_46443_ && doPlace && (!this.f_62776_.captureBlockStates || block instanceof net.minecraft.world.level.block.BaseEntityBlock)) {
                   p_62866_.m_60696_(this.f_62776_, p_62865_, blockstate, p_62867_);
                }
 
@@ -270,6 +_,7 @@
                }
 
                this.f_187603_ = true;
+               doPlace = true;
                return blockstate;
             }
          }
@@ -294,7 +_,17 @@
 
    @Nullable
    public BlockEntity m_5685_(BlockPos p_62868_, LevelChunk.EntityCreationType p_62869_) {
-      BlockEntity blockentity = this.f_187610_.get(p_62868_);
+      // CraftBukkit start
+      BlockEntity blockentity = f_62776_.capturedTileEntities.get(p_62868_);
+      if (blockentity == null) {
+         blockentity = (BlockEntity) this.f_187610_.get(p_62868_);
+      }
+      // CraftBukkit end
+
+      if (blockentity != null && blockentity.m_58901_()) {
+         f_187610_.remove(p_62868_);
+         blockentity = null;
+      }
       if (blockentity == null) {
          CompoundTag compoundtag = this.f_187609_.remove(p_62868_);
          if (compoundtag != null) {
@@ -312,9 +_,6 @@
                this.m_142170_(blockentity);
             }
          }
-      } else if (blockentity.m_58901_()) {
-         this.f_187610_.remove(p_62868_);
-         return null;
       }
 
       return blockentity;
@@ -330,6 +_,7 @@
          }
 
          this.m_156406_(p_156391_);
+         p_156391_.onLoad();
       }
 
    }
@@ -361,7 +_,13 @@
          if (blockentity != null && blockentity != p_156374_) {
             blockentity.m_7651_();
          }
-
+         // CraftBukkit start
+      } else {
+         System.out.println("Attempted to place a tile entity (" + p_156374_ + ") at " + p_156374_.m_58899_().m_123341_() + "," + p_156374_.m_58899_().m_123342_() + "," + p_156374_.m_58899_().m_123343_()
+                 + " (" + m_8055_(blockpos) + ") where there was no entity tile!");
+         System.out.println("Chunk coordinates: " + (this.f_187604_.f_45578_ * 16) + "," + (this.f_187604_.f_45579_ * 16));
+         new Exception().printStackTrace();
+         // CraftBukkit end
       }
    }
 
@@ -369,9 +_,14 @@
    public CompoundTag m_8051_(BlockPos p_62932_) {
       BlockEntity blockentity = this.m_7702_(p_62932_);
       if (blockentity != null && !blockentity.m_58901_()) {
+         try {
          CompoundTag compoundtag1 = blockentity.m_187480_();
          compoundtag1.m_128379_("keepPacked", false);
          return compoundtag1;
+         } catch (Exception e) {
+            f_62771_.error("A BlockEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", blockentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundTag compoundtag = this.f_187609_.get(p_62932_);
          if (compoundtag != null) {
@@ -386,6 +_,13 @@
    public void m_8114_(BlockPos p_62919_) {
       if (this.m_156370_()) {
          BlockEntity blockentity = this.f_187610_.remove(p_62919_);
+
+         // CraftBukkit start - SPIGOT-5561: Also remove from pending map
+         if (!f_187609_.isEmpty()) {
+            f_187609_.remove(p_62919_);
+         }
+         // CraftBukkit end
+
          if (blockentity != null) {
             Level level = this.f_62776_;
             if (level instanceof ServerLevel) {
@@ -433,6 +_,56 @@
 
    }
 
+   // CraftBukkit start
+   public void loadCallback() {
+      org.bukkit.Server server = this.f_62776_.getCraftServer();
+      if (server != null) {
+         /*
+          * If it's a new world, the first few chunks are generated inside
+          * the World constructor. We can't reliably alter that, so we have
+          * no way of creating a CraftWorld/CraftServer at that point.
+          */
+         org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
+         server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(bukkitChunk, this.needsDecoration));
+         if (this.needsDecoration) {
+            this.needsDecoration = false;
+            java.util.Random random = new java.util.Random();
+            ServerLevel level = ((ServerLevel) this.f_62776_);
+            random.setSeed(level.m_7328_());
+            long xRand = random.nextLong() / 2L * 2L + 1L;
+            long zRand = random.nextLong() / 2L * 2L + 1L;
+            random.setSeed((long) this.f_187604_.f_45578_ * xRand + (long) this.f_187604_.f_45579_ * zRand ^ level.m_7328_());
+            org.bukkit.World world = this.f_62776_.getWorld();
+            if (world != null) {
+               this.f_62776_.populating = true;
+               try {
+                  for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                     populator.populate(world, random, bukkitChunk);
+                  }
+               } finally {
+                  this.f_62776_.populating = false;
+               }
+            }
+            server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
+         }
+      }
+   }
+
+   public void unloadCallback() {
+      org.bukkit.Server server = this.f_62776_.getCraftServer();
+      org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
+      org.bukkit.event.world.ChunkUnloadEvent unloadEvent = new org.bukkit.event.world.ChunkUnloadEvent(bukkitChunk, this.m_6344_());
+      server.getPluginManager().callEvent(unloadEvent);
+      // note: saving can be prevented, but not forced if no saving is actually required
+      this.mustNotSave = !unloadEvent.isSaveChunk();
+   }
+
+   @Override
+   public boolean m_6344_() {
+      return super.m_6344_() && !this.mustNotSave;
+   }
+   // CraftBukkit end
+
    public boolean m_6430_() {
       return false;
    }
@@ -455,7 +_,7 @@
       p_187974_.accept((p_187968_, p_187969_, p_187970_) -> {
          BlockEntity blockentity = this.m_5685_(p_187968_, LevelChunk.EntityCreationType.IMMEDIATE);
          if (blockentity != null && p_187970_ != null && blockentity.m_58903_() == p_187969_) {
-            blockentity.m_142466_(p_187970_);
+            blockentity.handleUpdateTag(p_187970_);
          }
 
       });
@@ -564,6 +_,7 @@
    }
 
    public void m_187957_() {
+      this.f_187610_.values().forEach(BlockEntity::onChunkUnloaded);
       this.f_187610_.values().forEach(BlockEntity::m_7651_);
       this.f_187610_.clear();
       this.f_156362_.values().forEach((p_187966_) -> {
@@ -573,6 +_,7 @@
    }
 
    public void m_156369_() {
+      this.f_62776_.addFreshBlockEntities(this.f_187610_.values());
       this.f_187610_.values().forEach((p_187988_) -> {
          Level level = this.f_62776_;
          if (level instanceof ServerLevel serverlevel) {
@@ -621,6 +_,41 @@
       return new LevelChunk.BoundTickingBlockEntity<>(p_156376_, p_156377_);
    }
 
+   // FORGE START
+   private final net.minecraftforge.common.capabilities.CapabilityProvider.AsField<LevelChunk> capProvider = new net.minecraftforge.common.capabilities.CapabilityProvider.AsField<>(LevelChunk.class, this);
+
+   @org.jetbrains.annotations.NotNull
+   @Override
+   public <T> net.minecraftforge.common.util.LazyOptional<T> getCapability(@org.jetbrains.annotations.NotNull net.minecraftforge.common.capabilities.Capability<T> cap, @org.jetbrains.annotations.Nullable net.minecraft.core.Direction side)
+   {
+      return capProvider.getCapability(cap, side);
+   }
+
+   @Override
+   public boolean areCapsCompatible(net.minecraftforge.common.capabilities.CapabilityProvider<LevelChunk> other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public boolean areCapsCompatible(@org.jetbrains.annotations.Nullable net.minecraftforge.common.capabilities.CapabilityDispatcher other)
+   {
+      return capProvider.areCapsCompatible(other);
+   }
+
+   @Override
+   public void invalidateCaps()
+   {
+      capProvider.invalidateCaps();
+   }
+
+   @Override
+   public void reviveCaps()
+   {
+      capProvider.reviveCaps();
+   }
+   // FORGE END
+
    class BoundTickingBlockEntity<T extends BlockEntity> implements TickingBlockEntity {
       private final T f_156428_;
       private final BlockEntityTicker<T> f_156429_;
@@ -637,7 +_,9 @@
             if (LevelChunk.this.m_156410_(blockpos)) {
                try {
                   ProfilerFiller profilerfiller = LevelChunk.this.f_62776_.m_46473_();
+                  net.minecraftforge.server.timings.TimeTracker.BLOCK_ENTITY_UPDATE.trackStart(f_156428_);
                   profilerfiller.m_6521_(this::m_142280_);
+                  this.f_156428_.tickTimer.startTiming(); // Spigot
                   BlockState blockstate = LevelChunk.this.m_8055_(blockpos);
                   if (this.f_156428_.m_58903_().m_155262_(blockstate)) {
                      this.f_156429_.m_155252_(LevelChunk.this.f_62776_, this.f_156428_.m_58899_(), blockstate, this.f_156428_);
@@ -652,7 +_,17 @@
                   CrashReport crashreport = CrashReport.m_127521_(throwable, "Ticking block entity");
                   CrashReportCategory crashreportcategory = crashreport.m_127514_("Block entity being ticked");
                   this.f_156428_.m_58886_(crashreportcategory);
+
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringBlockEntities.get()) {
+                     f_62771_.error("{}", crashreport.m_127526_());
+                     f_156428_.m_7651_();
+                     LevelChunk.this.m_8114_(f_156428_.m_58899_());
+                  } else
                   throw new ReportedException(crashreport);
+                  // Spigot start
+               } finally {
+                  this.f_156428_.tickTimer.stopTiming();
+                  // Spigot end
                }
             }
          }
@@ -680,6 +_,34 @@
       IMMEDIATE,
       QUEUED,
       CHECK;
+   }
+
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    */
+   @java.lang.Deprecated
+   @org.jetbrains.annotations.Nullable
+   public final CompoundTag writeCapsToNBT() {
+      return capProvider.serializeInternal();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link net.minecraft.world.level.chunk.storage.ChunkSerializer}.
+    *
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundTag tag) {
+      capProvider.deserializeInternal(tag);
+   }
+
+   @Override
+   public Level getWorldForge() {
+      return m_62953_();
    }
 
    @FunctionalInterface
