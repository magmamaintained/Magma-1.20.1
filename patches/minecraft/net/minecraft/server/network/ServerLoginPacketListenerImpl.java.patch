--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -35,6 +_,9 @@
 import net.minecraft.util.CryptException;
 import net.minecraft.util.RandomSource;
 import org.apache.commons.lang3.Validate;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.player.AsyncPlayerPreLoginEvent;
+import org.bukkit.event.player.PlayerPreLoginEvent;
 import org.slf4j.Logger;
 
 public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener, TickablePacketListener {
@@ -44,7 +_,7 @@
    private static final RandomSource f_10016_ = RandomSource.m_216327_();
    private final byte[] f_252396_;
    final MinecraftServer f_10018_;
-   final Connection f_10013_;
+   public final Connection f_10013_;
    ServerLoginPacketListenerImpl.State f_10019_ = ServerLoginPacketListenerImpl.State.HELLO;
    private int f_10020_;
    @Nullable
@@ -60,7 +_,13 @@
    }
 
    public void m_9933_() {
-      if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
+      if (this.f_10019_ == State.NEGOTIATING) {
+         // We force the state into "NEGOTIATING" which is otherwise unused. Once we're completed we move the negotiation onto "READY_TO_ACCEPT"
+         // Might want to promote player object creation to here as well..
+         boolean negotiationComplete = net.minecraftforge.network.NetworkHooks.tickNegotiation(this, this.f_10013_, this.f_10024_);
+         if (negotiationComplete)
+            this.f_10019_ = State.READY_TO_ACCEPT;
+      } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT) {
          this.m_10055_();
       } else if (this.f_10019_ == ServerLoginPacketListenerImpl.State.DELAY_ACCEPT) {
          ServerPlayer serverplayer = this.f_10018_.m_6846_().m_11259_(this.f_10021_.getId());
@@ -77,6 +_,13 @@
 
    }
 
+   // CraftBukkit start
+   @Deprecated
+   public void disconnect(String s) {
+      m_10053_(Component.m_237113_(s));
+   }
+   // CraftBukkit end
+
    public boolean m_6198_() {
       return this.f_10013_.m_129536_();
    }
@@ -97,9 +_,12 @@
          this.f_10021_ = this.m_10038_(this.f_10021_);
       }
 
-      Component component = this.f_10018_.m_6846_().m_6418_(this.f_10013_.m_129523_(), this.f_10021_);
-      if (component != null) {
-         this.m_10053_(component);
+      // CraftBukkit start - fire PlayerLoginEvent
+      ServerPlayer s = this.f_10018_.m_6846_().canPlayerLogin(this, this.f_10021_);
+
+      if (s == null) {
+         // this.disconnect(component);
+         // CraftBukkit end
       } else {
          this.f_10019_ = ServerLoginPacketListenerImpl.State.ACCEPTED;
          if (this.f_10018_.m_6328_() >= 0 && !this.f_10013_.m_129531_()) {
@@ -112,7 +_,7 @@
          ServerPlayer serverplayer = this.f_10018_.m_6846_().m_11259_(this.f_10021_.getId());
 
          try {
-            ServerPlayer serverplayer1 = this.f_10018_.m_6846_().m_215624_(this.f_10021_);
+            ServerPlayer serverplayer1 = this.f_10018_.m_6846_().getPlayerForLogin(this.f_10021_, s); // CraftBukkit - add player reference
             if (serverplayer != null) {
                this.f_10019_ = ServerLoginPacketListenerImpl.State.DELAY_ACCEPT;
                this.f_10024_ = serverplayer1;
@@ -147,14 +_,14 @@
       GameProfile gameprofile = this.f_10018_.m_236731_();
       if (gameprofile != null && p_10047_.f_238040_().equalsIgnoreCase(gameprofile.getName())) {
          this.f_10021_ = gameprofile;
-         this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+         this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
       } else {
          this.f_10021_ = new GameProfile((UUID)null, p_10047_.f_238040_());
          if (this.f_10018_.m_129797_() && !this.f_10013_.m_129531_()) {
             this.f_10019_ = ServerLoginPacketListenerImpl.State.KEY;
             this.f_10013_.m_129512_(new ClientboundHelloPacket("", this.f_10018_.m_129790_().getPublic().getEncoded(), this.f_252396_));
          } else {
-            this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+            this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
          }
 
       }
@@ -186,19 +_,56 @@
          throw new IllegalStateException("Protocol error", cryptexception);
       }
 
-      Thread thread = new Thread("User Authenticator #" + f_10014_.incrementAndGet()) {
+      Thread thread = new Thread(net.minecraftforge.fml.util.thread.SidedThreadGroups.SERVER, "User Authenticator #" + f_10014_.incrementAndGet()) {
          public void run() {
             GameProfile gameprofile = ServerLoginPacketListenerImpl.this.f_10021_;
 
             try {
                ServerLoginPacketListenerImpl.this.f_10021_ = ServerLoginPacketListenerImpl.this.f_10018_.m_129925_().hasJoinedServer(new GameProfile((UUID)null, gameprofile.getName()), s, this.m_10064_());
                if (ServerLoginPacketListenerImpl.this.f_10021_ != null) {
+                  // CraftBukkit start - fire PlayerPreLoginEvent
+                  if (!f_10013_.m_129536_()) {
+                     return;
+                  }
+
+                  String playerName = f_10021_.getName();
+                  java.net.InetAddress address = ((java.net.InetSocketAddress) f_10013_.m_129523_()).getAddress();
+                  java.util.UUID uniqueId = f_10021_.getId();
+                  final org.bukkit.craftbukkit.CraftServer server = ServerLoginPacketListenerImpl.this.f_10018_.server;
+
+                  AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+                  server.getPluginManager().callEvent(asyncEvent);
+
+                  if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                     final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+                     if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                        event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+                     }
+                     Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                        @Override
+                        protected PlayerPreLoginEvent.Result evaluate() {
+                           server.getPluginManager().callEvent(event);
+                           return event.getResult();
+                        }};
+
+                     ServerLoginPacketListenerImpl.this.f_10018_.processQueue.add(waitable);
+                     if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                        disconnect(event.getKickMessage());
+                        return;
+                     }
+                  } else {
+                     if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                        disconnect(asyncEvent.getKickMessage());
+                        return;
+                     }
+                  }
+                  // CraftBukkit end
                   ServerLoginPacketListenerImpl.f_10015_.info("UUID of player {} is {}", ServerLoginPacketListenerImpl.this.f_10021_.getName(), ServerLoginPacketListenerImpl.this.f_10021_.getId());
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Failed to verify username but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.unverified_username"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Username '{}' tried to join with an invalid session", (Object)gameprofile.getName());
@@ -207,11 +_,16 @@
                if (ServerLoginPacketListenerImpl.this.f_10018_.m_129792_()) {
                   ServerLoginPacketListenerImpl.f_10015_.warn("Authentication servers are down but will let them in anyway!");
                   ServerLoginPacketListenerImpl.this.f_10021_ = gameprofile;
-                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
+                  ServerLoginPacketListenerImpl.this.f_10019_ = ServerLoginPacketListenerImpl.State.NEGOTIATING; // FORGE: continue NEGOTIATING, we move to READY_TO_ACCEPT after Forge is ready
                } else {
                   ServerLoginPacketListenerImpl.this.m_10053_(Component.m_237115_("multiplayer.disconnect.authservers_down"));
                   ServerLoginPacketListenerImpl.f_10015_.error("Couldn't verify username because servers are unavailable");
                }
+               // CraftBukkit start - catch all exceptions
+            } catch (Exception exception) {
+               disconnect("Failed to verify username!");
+               f_10018_.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
+               // CraftBukkit end
             }
 
          }
@@ -227,6 +_,7 @@
    }
 
    public void m_7223_(ServerboundCustomQueryPacket p_10045_) {
+      if (!net.minecraftforge.network.NetworkHooks.onCustomPayload(p_10045_, this.f_10013_))
       this.m_10053_(Component.m_237115_("multiplayer.disconnect.unexpected_query_response"));
    }
 
