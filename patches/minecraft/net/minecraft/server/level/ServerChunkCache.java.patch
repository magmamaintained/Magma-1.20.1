--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -81,6 +_,16 @@
       this.m_8488_();
    }
 
+   // CraftBukkit start - properly implement isChunkLoaded
+   public boolean isChunkLoaded(int chunkX, int chunkZ) {
+      ChunkHolder chunk = this.f_8325_.m_140174_(ChunkPos.m_45589_(chunkX, chunkZ));
+      if (chunk == null) {
+         return false;
+      }
+      return chunk.getFullChunkNow() != null;
+   }
+   // CraftBukkit end
+
    public ThreadedLevelLightEngine m_7827_() {
       return this.f_8331_;
    }
@@ -120,15 +_,17 @@
          for(int j = 0; j < 4; ++j) {
             if (i == this.f_8337_[j] && p_8362_ == this.f_8338_[j]) {
                ChunkAccess chunkaccess = this.f_8339_[j];
-               if (chunkaccess != null || !p_8363_) {
+               if (chunkaccess != null) { // CraftBukkit - the chunk can become accessible in the meantime TODO for non-null chunks it might also make sense to check that the chunk's state hasn't changed in the meantime
                   return chunkaccess;
                }
             }
          }
 
          profilerfiller.m_6174_("getChunkCacheMiss");
+         f_8329_.timings.syncChunkLoadTimer.startTiming(); // Spigot
          CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.m_8456_(p_8360_, p_8361_, p_8362_, p_8363_);
          this.f_8332_.m_18701_(completablefuture::isDone);
+         f_8329_.timings.syncChunkLoadTimer.stopTiming(); // Spigot
          ChunkAccess chunkaccess1 = completablefuture.join().map((p_8406_) -> {
             return p_8406_;
          }, (p_8423_) -> {
@@ -162,6 +_,7 @@
          if (chunkholder == null) {
             return null;
          } else {
+            if (chunkholder.currentlyLoading != null) return chunkholder.currentlyLoading; // Forge: If the requested chunk is loading, bypass the future chain to prevent a deadlock.
             Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either = chunkholder.m_140080_(ChunkStatus.f_62326_).getNow((Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>)null);
             if (either == null) {
                return null;
@@ -208,7 +_,15 @@
       long i = chunkpos.m_45588_();
       int j = ChunkLevel.m_287141_(p_8459_);
       ChunkHolder chunkholder = this.m_8364_(i);
-      if (p_8460_) {
+      // CraftBukkit start - don't add new ticket for currently unloading chunk
+      boolean currentlyUnloading = false;
+      if (chunkholder != null) {
+         FullChunkStatus oldChunkState = ChunkLevel.m_287264_(chunkholder.f_140006_);
+         FullChunkStatus currentChunkState = ChunkLevel.m_287264_(chunkholder.m_140093_());
+         currentlyUnloading = (oldChunkState.m_287205_(FullChunkStatus.FULL) && !currentChunkState.m_287205_(FullChunkStatus.FULL));
+      }
+      if (p_8460_ && !currentlyUnloading) {
+         // CraftBukkit end
          this.f_8327_.m_140792_(TicketType.f_9449_, chunkpos, j, chunkpos);
          if (this.m_8416_(chunkholder, j)) {
             ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
@@ -226,7 +_,7 @@
    }
 
    private boolean m_8416_(@Nullable ChunkHolder p_8417_, int p_8418_) {
-      return p_8417_ == null || p_8417_.m_140093_() > p_8418_;
+      return p_8417_ == null || p_8417_.f_140006_ > p_8418_; // CraftBukkit using oldTicketLevel for isLoaded checks
    }
 
    public boolean m_5563_(int p_8429_, int p_8430_) {
@@ -297,11 +_,36 @@
    }
 
    public void close() throws IOException {
+      // CraftBukkit start
+      close(true);
+   }
+
+   public void close(boolean save) throws IOException {
+      if (save) {
+         this.m_8419_(true);
+      }
+      // CraftBukkit end
       this.m_8419_(true);
       this.f_8331_.close();
       this.f_8325_.close();
    }
 
+   // CraftBukkit start - modelled on below
+   public void purgeUnload() {
+      this.f_8329_.m_46473_().m_6180_("purge");
+      this.f_8329_.timings.doChunkMap.startTiming(); // Spigot
+      this.f_8327_.m_140776_();
+      this.m_8489_();
+      this.f_8329_.timings.doChunkMap.stopTiming(); // Spigot
+      this.f_8329_.timings.doChunkUnload.startTiming(); // Spigot
+      this.f_8329_.m_46473_().m_6182_("unload");
+      this.f_8325_.m_140280_(() -> true);
+      this.f_8329_.timings.doChunkUnload.stopTiming(); // Spigot
+      this.f_8329_.m_46473_().m_7238_();
+      this.m_8488_();
+   }
+   // CraftBukkit end
+
    public void m_201698_(BooleanSupplier p_201913_, boolean p_201914_) {
       this.f_8329_.m_46473_().m_6180_("purge");
       this.f_8327_.m_140776_();
@@ -329,7 +_,7 @@
          ProfilerFiller profilerfiller = this.f_8329_.m_46473_();
          profilerfiller.m_6180_("pollingChunks");
          int k = this.f_8329_.m_46469_().m_46215_(GameRules.f_46143_);
-         boolean flag1 = leveldata.m_6793_() % 400L == 0L;
+         boolean flag1 = f_8329_.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && leveldata.m_6793_() % f_8329_.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
          profilerfiller.m_6180_("naturalSpawnCount");
          int l = this.f_8327_.m_140816_();
          NaturalSpawner.SpawnState naturalspawner$spawnstate = NaturalSpawner.m_186524_(l, this.f_8329_.m_8583_(), this::m_8370_, new LocalMobCapCalculator(this.f_8325_));
@@ -345,20 +_,22 @@
          }
 
          profilerfiller.m_6182_("spawnAndTick");
-         boolean flag2 = this.f_8329_.m_46469_().m_46207_(GameRules.f_46134_);
+         boolean flag2 = this.f_8329_.m_46469_().m_46207_(GameRules.f_46134_) && !f_8329_.m_6907_().isEmpty(); // CraftBukkit
          Collections.shuffle(list);
 
          for(ServerChunkCache.ChunkAndHolder serverchunkcache$chunkandholder : list) {
             LevelChunk levelchunk1 = serverchunkcache$chunkandholder.f_184028_;
             ChunkPos chunkpos = levelchunk1.m_7697_();
-            if (this.f_8329_.m_201916_(chunkpos) && this.f_8325_.m_183879_(chunkpos)) {
+            if ((this.f_8329_.m_201916_(chunkpos) && this.f_8325_.m_183879_(chunkpos)) || this.f_8327_.shouldForceTicks(chunkpos.m_45588_()) && this.f_8325_.anyPlayerCloseEnoughForSpawning(chunkpos, true)) { // Spigot
                levelchunk1.m_187632_(j);
                if (flag2 && (this.f_8335_ || this.f_8336_) && this.f_8329_.m_6857_().m_61927_(chunkpos)) {
                   NaturalSpawner.m_47029_(this.f_8329_, levelchunk1, naturalspawner$spawnstate, this.f_8336_, this.f_8335_, flag1);
                }
 
                if (this.f_8329_.m_183438_(chunkpos.m_45588_())) {
+                  this.f_8329_.timings.doTickTiles.startTiming(); // Spigot
                   this.f_8329_.m_8714_(levelchunk1, k);
+                  this.f_8329_.timings.doTickTiles.stopTiming(); // Spigot
                }
             }
          }
@@ -374,7 +_,9 @@
          });
          profilerfiller.m_7238_();
          profilerfiller.m_7238_();
+         this.f_8329_.timings.tracker.startTiming(); // Spigot
          this.f_8325_.m_140421_();
+         this.f_8329_.timings.tracker.stopTiming(); // Spigot
       }
    }
 
@@ -432,11 +_,17 @@
    }
 
    public <T> void m_8387_(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_) {
-      this.f_8327_.m_140840_(p_8388_, p_8389_, p_8390_, p_8391_);
+      addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, false);
+   }
+   public <T> void addRegionTicket(TicketType<T> p_8388_, ChunkPos p_8389_, int p_8390_, T p_8391_, boolean forceTicks) {
+      this.f_8327_.addRegionTicket(p_8388_, p_8389_, p_8390_, p_8391_, forceTicks);
    }
 
    public <T> void m_8438_(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_) {
-      this.f_8327_.m_140849_(p_8439_, p_8440_, p_8441_, p_8442_);
+      removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, false);
+   }
+   public <T> void removeRegionTicket(TicketType<T> p_8439_, ChunkPos p_8440_, int p_8441_, T p_8442_, boolean forceTicks) {
+      this.f_8327_.removeRegionTicket(p_8439_, p_8440_, p_8441_, p_8442_, forceTicks);
    }
 
    public void m_6692_(ChunkPos p_8400_, boolean p_8401_) {
@@ -534,13 +_,19 @@
          super.m_6367_(p_8502_);
       }
 
+      // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
       public boolean m_7245_() {
-         if (ServerChunkCache.this.m_8489_()) {
-            return true;
-         } else {
-            ServerChunkCache.this.f_8331_.m_9409_();
-            return super.m_7245_();
+         try {
+            if (ServerChunkCache.this.m_8489_()) {
+               return true;
+            } else {
+               ServerChunkCache.this.f_8331_.m_9409_();
+               return super.m_7245_();
+            }
+         } finally {
+            f_8325_.callbackExecutor.run();
          }
+         // CraftBukkit end
       }
    }
 }
