--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -26,11 +_,7 @@
 import net.minecraft.Util;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
-import net.minecraft.server.ConsoleInput;
-import net.minecraft.server.MinecraftServer;
-import net.minecraft.server.ServerInterface;
-import net.minecraft.server.Services;
-import net.minecraft.server.WorldStem;
+import net.minecraft.server.*;
 import net.minecraft.server.gui.MinecraftServerGui;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -51,6 +_,13 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.craftbukkit.SpigotTimings;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 import org.slf4j.Logger;
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
@@ -60,7 +_,7 @@
    public final List<ConsoleInput> f_139600_ = Collections.synchronizedList(Lists.newArrayList());
    @Nullable
    private QueryThreadGs4 f_139601_;
-   public final RconConsoleSource f_139602_;
+   // public final RconConsoleSource rconConsoleSource; // CraftBukkit - remove field
    @Nullable
    private RconThread f_139603_;
    private final DedicatedServerSettings f_139604_;
@@ -68,23 +_,59 @@
    private MinecraftServerGui f_139605_;
    @Nullable
    private final TextFilterClient f_139606_;
+   @Nullable
+   private net.minecraft.client.server.LanServerPinger dediLanPinger;
 
-   public DedicatedServer(Thread p_214789_, LevelStorageSource.LevelStorageAccess p_214790_, PackRepository p_214791_, WorldStem p_214792_, DedicatedServerSettings p_214793_, DataFixer p_214794_, Services p_214795_, ChunkProgressListenerFactory p_214796_) {
-      super(p_214789_, p_214790_, p_214791_, p_214792_, Proxy.NO_PROXY, p_214794_, p_214795_, p_214796_);
+   // CraftBukkit start - Signature changed
+   public DedicatedServer(joptsimple.OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread p_214789_, LevelStorageSource.LevelStorageAccess p_214790_, PackRepository p_214791_, WorldStem p_214792_, DedicatedServerSettings p_214793_, DataFixer p_214794_, Services p_214795_, ChunkProgressListenerFactory p_214796_) {
+      super(options, worldLoader, p_214789_, p_214790_, p_214791_, p_214792_, Proxy.NO_PROXY, p_214794_, p_214795_, p_214796_);
+      // CraftBukkit end
       this.f_139604_ = p_214793_;
-      this.f_139602_ = new RconConsoleSource(this);
+      //this.rconConsoleSource = new RconConsoleSource(this); // CraftBukkit - remove field
       this.f_139606_ = TextFilterClient.m_143736_(p_214793_.m_139777_().f_139724_);
    }
 
    public boolean m_7038_() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
-            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+            // CraftBukkit start
+            if (!org.bukkit.craftbukkit.Main.useConsole) {
+               return;
+            }
+            jline.console.ConsoleReader bufferedreader = reader;
+
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException ex) {
+               return;
+            }
+            // CraftBukkit end
 
             String s1;
             try {
-               while(!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_() && (s1 = bufferedreader.readLine()) != null) {
-                  DedicatedServer.this.m_139645_(s1, DedicatedServer.this.m_129893_());
+               // CraftBukkit start - JLine disabling compatibility
+               while (!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_()) {
+                  if (Main.useJline) {
+                     s1 = bufferedreader.readLine(">", null);
+                  } else {
+                     s1 = bufferedreader.readLine();
+                  }
+
+                  // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                  if (s1 == null) {
+                     try {
+                        Thread.sleep(50L);
+                     } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                     }
+                     continue;
+                  }
+                  if (s1.trim().length() > 0) { // Trim to filter lines which are just spaces
+                     DedicatedServer.this.m_139645_(s1, DedicatedServer.this.m_129893_());
+                  }
+                  // CraftBukkit end
                }
             } catch (IOException ioexception1) {
                DedicatedServer.f_139598_.error("Exception handling console input", (Throwable)ioexception1);
@@ -92,6 +_,29 @@
 
          }
       };
+
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+      global.addHandler(new org.bukkit.craftbukkit.util.ForwardLogHandler());
+
+      final org.apache.logging.log4j.core.Logger logger =
+              ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+      for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+         if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+            logger.removeAppender(appender);
+         }
+      }
+
+
+      new org.bukkit.craftbukkit.util.TerminalConsoleWriterThread(System.out, this.reader).start();
+      System.setOut(IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      System.setErr(IoBuilder.forLogger(logger).setLevel(org.apache.logging.log4j.Level.WARN).buildPrintStream());
+      // CraftBukkit end
+
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_139598_));
       thread.start();
@@ -110,6 +_,12 @@
          this.m_129913_(dedicatedserverproperties.f_139730_);
       }
 
+      // Spigot start
+      this.m_129823_(new DedicatedPlayerList(this, this.m_247573_(), this.f_129745_));
+      org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+      org.spigotmc.SpigotConfig.registerCommands();
+      // Spigot end
+
       this.m_129997_(dedicatedserverproperties.f_139733_);
       this.m_129999_(dedicatedserverproperties.f_139734_);
       this.m_129989_(dedicatedserverproperties.f_139736_);
@@ -138,10 +_,23 @@
          return false;
       }
 
+      // CraftBukkit start
+      // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage));  // Spigot - moved up
+      server.loadPlugins();
+      server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+      // CraftBukkit end
+
       if (!this.m_129797_()) {
          f_139598_.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
          f_139598_.warn("The server will make no attempt to authenticate usernames. Beware.");
-         f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         // Spigot start
+         if (org.spigotmc.SpigotConfig.bungee) {
+            DedicatedServer.f_139598_.warn("Whilst this makes it possible to use BungeeCord, unless access to your server is properly restricted, it also opens up the ability for hackers to connect with any username they choose.");
+            DedicatedServer.f_139598_.warn("Please see http://www.spigotmc.org/wiki/firewall-guide/ for further information.");
+         } else {
+            DedicatedServer.f_139598_.warn("While this makes the game possible to play without internet access, it also opens up the ability for hackers to connect with any username they choose.");
+         }
+         // Spigot end
          f_139598_.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
       }
 
@@ -152,15 +_,17 @@
       if (!OldUsersConverter.m_11106_(this)) {
          return false;
       } else {
-         this.m_129823_(new DedicatedPlayerList(this, this.m_247573_(), this.f_129745_));
+         // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // CraftBukkit - moved up
          long i = Util.m_137569_();
          SkullBlockEntity.m_222885_(this.f_236721_, this);
          GameProfileCache.m_11004_(this.m_129797_());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          f_139598_.info("Preparing level \"{}\"", (Object)this.m_7123_());
-         this.m_130006_();
+         this.loadLevel(f_129744_.m_78277_()); // CraftBukkit
          long j = Util.m_137569_() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
          f_139598_.info("Done ({})! For help, type \"help\"", (Object)s);
+         this.f_129726_ = Util.m_137550_(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.f_139744_ != null) {
             this.m_129900_().m_46170_(GameRules.f_46153_).m_46246_(dedicatedserverproperties.f_139744_, this);
          }
@@ -175,7 +_,7 @@
             this.f_139603_ = RconThread.m_11615_(this);
          }
 
-         if (this.m_139669_() > 0L) {
+         if (false && this.m_139669_() > 0L) {  // Spigot - disable
             Thread thread1 = new Thread(new ServerWatchdog(this));
             thread1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandlerWithName(f_139598_));
             thread1.setName("Server Watchdog");
@@ -188,7 +_,12 @@
             f_139598_.info("JMX monitoring enabled");
          }
 
-         return true;
+         if (net.minecraftforge.common.ForgeConfig.SERVER.advertiseDedicatedServerToLan.get()) {
+            this.dediLanPinger = new net.minecraft.client.server.LanServerPinger(this.m_129916_(), String.valueOf(this.m_7448_()));
+            this.dediLanPinger.start();
+         }
+
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -263,6 +_,10 @@
          this.f_139601_.m_7530_();
       }
 
+      if (this.dediLanPinger != null) {
+         this.dediLanPinger.interrupt();
+         this.dediLanPinger = null;
+      }
    }
 
    public void m_5703_(BooleanSupplier p_139661_) {
@@ -279,10 +_,22 @@
    }
 
    public void m_139665_() {
+      SpigotTimings.serverCommandTimer.startTiming(); // Spigot
       while(!this.f_139600_.isEmpty()) {
          ConsoleInput consoleinput = this.f_139600_.remove(0);
-         this.m_129892_().m_230957_(consoleinput.f_135929_, consoleinput.f_135928_);
+         // CraftBukkit start - ServerCommand for preprocessing
+         ServerCommandEvent event = new ServerCommandEvent(console, consoleinput.f_135928_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            continue;
+         }
+         consoleinput = new ConsoleInput(event.getCommand(), consoleinput.f_135929_);
+         // this.getCommands().performPrefixedCommand(consoleinput.source, consoleinput.msg); // Called in dispatchServerCommand
+         server.dispatchServerCommand(console, consoleinput);
+         // CraftBukkit end
       }
+
+      SpigotTimings.serverCommandTimer.stopTiming(); // Spigot
 
    }
 
@@ -474,15 +_,52 @@
    }
 
    public String m_7138_() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+      result.append(server.getName());
+      result.append(" on Bukkit ");
+      result.append(server.getBukkitVersion());
+
+      if (plugins.length > 0 && server.getQueryPlugins()) {
+         result.append(": ");
+
+         for (int i = 0; i < plugins.length; i++) {
+            if (i > 0) {
+               result.append("; ");
+            }
+
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String m_7261_(String p_139644_) {
-      this.f_139602_.m_11512_();
+      // CraftBukkit start - fire RemoteServerCommandEvent
+      throw new UnsupportedOperationException("Not supported - remote source required.");
+   }
+
+   public String runCommand(RconConsoleSource rconConsoleSource, String s) {
+      rconConsoleSource.m_11512_();
       this.m_18709_(() -> {
-         this.m_129892_().m_230957_(this.f_139602_.m_11514_(), p_139644_);
+         // CraftBukkit start - fire RemoteServerCommandEvent
+         CommandSourceStack wrapper = rconConsoleSource.m_11514_();
+         RemoteServerCommandEvent event = new RemoteServerCommandEvent(rconConsoleSource.getBukkitSender(wrapper), s);
+         if (event.isCancelled()) {
+            return;
+         }
+         ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), wrapper);
+         server.dispatchServerCommand(event.getSender(), serverCommand);
+         // CraftBukkit end
       });
-      return this.f_139602_.m_11513_();
+      return rconConsoleSource.m_11513_();
+      // CraftBukkit end
    }
 
    public void m_139688_(boolean p_139689_) {
@@ -492,7 +_,12 @@
    }
 
    public void m_7041_() {
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.GameShuttingDownEvent());
       super.m_7041_();
+      if (this.dediLanPinger != null) {
+         this.dediLanPinger.interrupt();
+         this.dediLanPinger = null;
+      }
       Util.m_137580_();
       SkullBlockEntity.m_196704_();
    }
@@ -525,4 +_,15 @@
    public Optional<MinecraftServer.ServerResourcePackInfo> m_214042_() {
       return this.f_139604_.m_139777_().f_214802_;
    }
+
+   // CraftBukkit start
+   public boolean isDebugging() {
+      return this.m_7913_().debug;
+   }
+
+   @Override
+   public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return console;
+   }
+   // CraftBukkit end
 }
